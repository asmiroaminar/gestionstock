/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import dbclasse.User;
import dbmanipulation.UserServices;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author IT-06
 */
public class Log_in extends javax.swing.JFrame {

    UserServices us = new UserServices();

    /**
     * Creates new form Log_in
     */
    public Log_in() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        u_nam = new javax.swing.JTextField();
        u_psw = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("login");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Nom d'utilisateur :");

        u_nam.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        u_psw.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Mot de passe :");

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("Valider");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton2.setText("Fermer");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconse/icons8-login-64.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(u_nam)
                                    .addComponent(u_psw, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(87, 87, 87)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 28, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(u_nam, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(u_psw, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:
            User u = us.getOneUser(u_nam.getText(), u_psw.getText());
            if (u != null) {
                try {
                    new Home_v2().setVisible(true);
                    dispose();
                } catch (SQLException ex) {
                    Logger.getLogger(Home_v2.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Nom d'utilisateur / mot de passe incorrect");
            }

        } catch (SQLException ex) {
            Logger.getLogger(Log_in.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    static String key_readed = "";
    static String key_calc = "";

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Log_in.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Log_in.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Log_in.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Log_in.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                 try (FileReader fileReader = new FileReader("data.txt")) {
//                    int ch = fileReader.read();
//                    key = "";
//                    while (ch != -1) {
//                        key += (char) ch;
//                        ch = fileReader.read();
//                    }
//                    //*****************************
//                    try {
//                        Process p = Runtime.getRuntime().exec("wmic baseboard get serialnumber");
//                        BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));
//                        String line;
//                        key_calc = "";
//                        while ((line = input.readLine()) != null) {
//                            key_calc += line;
//                        }
//                        if (key_calc.equalsIgnoreCase(" ")) {
//                        } else {
//                            key_calc = "" + (key_calc.hashCode());
//                        }
//                        input.close();
//                    } catch (IOException ex) {
//
//                    }
//                    //*****************************
//
//                    if (key.equals(key_calc)) {
//                        new Login().setVisible(true);
//                    } else {
//                        JOptionPane.showMessageDialog(null, "Voter application n'est pas activer !!");
//                    }
//
//                } catch (FileNotFoundException e) {
//                    JOptionPane.showMessageDialog(null, "Voter application n'est pas activer !!");
//                    System.out.println("+++++++++++++");
//                } catch (IOException e) {
//                    //System.out.println("+++++++++++++");
//                }     
                String key = "Mary has one cat";
                File inputFile = new File("document.txt");
                File encryptedFile = new File("key.lic");
                File decryptedFile = new File("key_clear.lic");

                if (encryptedFile.exists()) {
                    // test if the key is valid or NOT
                    //
                    //****** Recalculate key *********
                    //     get mother bord serial
                    try {
                        Process p = Runtime.getRuntime().exec("wmic baseboard get serialnumber");
                        BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));
                        String line;
                        key_calc = "";
                        while ((line = input.readLine()) != null) {
                            key_calc += line;
                        }
                        if (key_calc.equalsIgnoreCase(" ")) {
                        } else {
                            System.out.println(key_calc);
                            key_calc = "" + (key_calc.hashCode());
                        }
                        input.close();
                    } catch (IOException ex) {
                    }
                    key_calc = key_calc + "roh_ta3ti";

                    key_calc = "" + (key_calc.hashCode());

                    //
                    // ***** Read key from file **********
                    //---------- Decrype file 
                    try {
                        CryptoUtils.decrypt(key, encryptedFile, decryptedFile);
                    } catch (CryptoException ex) {
                        System.out.println(ex.getMessage());
                        ex.printStackTrace();
                    }
                    BufferedReader br;
                    try {
                        br = new BufferedReader(new FileReader(decryptedFile));
                        // Declaring a string variable
                        String st;
                        // Condition holds true till
                        // there is character in a string
                        while ((st = br.readLine()) != null) {
                            key_readed = st;
                        }

                        //----- Delete licence_clear.lic
                        br.close();
                        if (decryptedFile.delete()) {
                            System.out.println("Deleted the file: " + decryptedFile.getName());
                        } else {
                            System.out.println("Failed to delete the file.");
                        }

                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(Activation_frame.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(Activation_frame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    //
                    //------- Compair between keys to lunche app 
                    //

                    if (key_calc.equals(key_readed)) {
                        new Log_in().setVisible(true);
                    } else {
                        JOptionPane.showMessageDialog(null, "Votre Produit est n'est pas Activer !");
                        Activation_frame dialog = new Activation_frame(new javax.swing.JFrame(), true);
                        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                            @Override
                            public void windowClosing(java.awt.event.WindowEvent e) {
                                System.exit(0);
                            }
                        });
                        dialog.setVisible(true);
                    }

                } else {

//                    //   Run for first time only
                    Activation_frame dialog = new Activation_frame(new javax.swing.JFrame(), true);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                            System.exit(0);
                        }
                    });
                    dialog.setVisible(true);

//                    //    generer Random Key 10 digites
//                    long number = (long) Math.floor(Math.random() * 9_000_000_000L) + 1_000_000_000L;
//                    String hach = "" + number;
//                    //   Write it down on txt file  = key.txt
//                    try (PrintWriter out = new PrintWriter("key.txt")) {
//                        out.println(hach);
//                    } catch (FileNotFoundException ex) {
//                        Logger.getLogger(Activation_frame.class.getName()).log(Level.SEVERE, null, ex);
//                    }
//                    //    Encrypte key.txt file
//                    try {
//                        //---------Encryte key.txt file---------------------------
//                        CryptoUtils.encrypt(key, inputFile, encryptedFile);
//                        //--------delete key.txt File---------------------
//                        if (inputFile.delete()) {
//                            System.out.println("Deleted the file: " + inputFile.getName());
//                        } else {
//                            System.out.println("Failed to delete the file.");
//                        }
//                    } catch (CryptoException ex) {
//                        System.out.println(ex.getMessage());
//                        ex.printStackTrace();
//                    }
                }

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField u_nam;
    private javax.swing.JPasswordField u_psw;
    // End of variables declaration//GEN-END:variables
}
